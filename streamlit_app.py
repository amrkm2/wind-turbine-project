import streamlit as st
import pandas as pd
from sklearn.ensemble import ExtraTreesRegressor
import pickle
import numpy as np

# Load the dataset
@st.cache_data 
def load_data(url):
    df = pd.read_csv(url)
    return df

data = load_data("https://raw.githubusercontent.com/amrhkm/wind-turbine-power-prediction/master/df.csv")

ori_data = load_data('https://raw.githubusercontent.com/amrhkm/wind-turbine-power-prediction/master/T1.csv')

# Load the trained model from the file
@st.cache_resource
def load_model():
  with open('etree_tuned.pickle', 'rb') as f:
    model = pickle.load(f)
    return model

model = load_model()


# Page header
st.title("Wind Turbine Power Prediction")
st.write(f"Made by Amir Hakim, visit my [data portfolio](https://amrhkm.com/) to view my other projects")
st.write(f"View the [data wrangling and EDA process](https://amrhkm.com/)")
st.header(f"Columns of the [original data](https://www.kaggle.com/datasets/berkerisen/wind-turbine-scada-dataset)")
st.write("""
- Date/Time : readings for 10 minutes intervals
- LV ActivePower (kW): The power generated by the turbine for that moment
- Wind Speed (m/s): The wind speed at the hub height of the turbine (the wind speed that turbine use for electricity generation)
- TheoreticalPowerCurve (kW): The theoretical power values that the turbine generates with that wind speed which is given by the turbine manufacturer
- Wind Direction (Â°): The wind direction at the hub height of the turbine (wind turbines turn to this direction automatically)
""")

# show both ori and processed df

col1, col2 = st.columns(2)

with col1:
  if col1.checkbox('Show Original Dataframe'):
    col1.dataframe(ori_data)

with col2:
  if col2.checkbox('Show Training Dataframe'):
    col2.dataframe(data)
   
# to downlaod the processed df

@st.cache_data
def convert_df(df):
  return df.to_csv().encode('utf-8') # IMPORTANT: Cache the conversion to prevent computation on every rerun

csv = convert_df(data)

st.download_button(
    label="Download Processed CSV",
    data=csv,
    file_name='wind_turbine.csv',
    mime='text/csv',
)


st.subheader("Use these slider to make prediction")
# Sliders for input features
wind_speed_ms = st.slider('Wind Speed (m/s)', float(data['wind_speed_ms'].min()), float(data['wind_speed_ms'].max()), step=0.1)
wind_direction_deg = st.slider('Wind Direction (deg)', float(data['wind_direction_deg'].min()), float(data['wind_direction_deg'].max()), step=1.0)
month = st.slider('Month', int(data['month'].min()), int(data['month'].max()))
day = st.slider('Day', int(data['day'].min()), int(data['day'].max()))
hour = st.slider('Hour', int(data['hour'].min()), int(data['hour'].max()))


# Predict button
if st.button('Predict Power'):
    # Create input data from the sliders
    input_data = [[wind_speed_ms, wind_direction_deg, month, day, hour]]
    input_df = pd.DataFrame(input_data, columns=['wind_speed_ms', 'wind_direction_deg', 'month', 'day', 'hour'])

    prediction = model.predict(input_df)
    
    st.subheader(f"The predicted power output is **:blue[{prediction[0]:.2f}]** kW")
